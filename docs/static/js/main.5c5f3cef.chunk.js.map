{"version":3,"sources":["images/logo.svg","component/ResultOperation.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["TipAumount","bill","total","porc","useState","totalTip","setTotalTip","useEffect","final","round","Math","Number","EPSILON","className","Total","totalPerson","setTotalPerson","count","ResultOperation","porcInput","reset","lastPorc","setLastPorc","onClick","CustomInput","value","setValue","title","icono","type","onChange","target","placeholder","TipButtons","text","setPorc","setPorcInpute","porcentajes","map","e","nanoid","App","setBill","people","setPeople","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c5f3cef.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.3cc0528b.svg\";","import { useEffect, useState } from \"react\"\r\n\r\nconst ResultOperation = ({ bill, porc, porcInput, total, reset }) => {\r\n\r\n    const [lastPorc, setLastPorc] = useState(\"\")\r\n\r\n    useEffect(()=>{\r\n        (porcInput!==\"\")?(setLastPorc(porcInput)):(setLastPorc(porc))\r\n    },[porc,porcInput])\r\n\r\n    return (\r\n        <div className=\"bg-cyan-strongest rounded-lg pt-10 pb-5 sm:py-10 w-full h-full items-center flex flex-col justify-between\">\r\n            <div className=\"flex flex-col h-1/2\">\r\n                <TipAumount \r\n                    bill={bill}\r\n                    total={total}\r\n                    porc={lastPorc}\r\n                />\r\n                <Total \r\n                    bill={bill}\r\n                    total={total}\r\n                />\r\n            </div>\r\n            <button className=\"bg-cyan-strong rounded-sm px-28 py-1 text-cyan-strongest font-semibold mt-6 sm:mt-0 hover:shadow-xl hover:text-warmGray-50\"\r\n            onClick={reset}\r\n            >RESET</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TipAumount = ({ bill, total, porc }) => {\r\n\r\n    const [totalTip, setTotalTip] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (bill > 0 && total > 0 && porc > 0) {\r\n            let por = (bill * porc) / 100\r\n            let final = por/total\r\n            let round = Math.round((final + Number.EPSILON)*100)/100;\r\n            setTotalTip(round)\r\n        } else {\r\n            setTotalTip('0.00')\r\n        }\r\n    }, [total, porc, bill])\r\n\r\n    return (\r\n        <div className=\"grid grid-cols-2 gap-20 gap-x-14 sm:gap-20 justify-around w-full items-center h-full\">\r\n            <div className=\"flex flex-col justify-between\">\r\n                <h2 className=\"text-white text-sm font-semibold\">Tip Amount</h2>\r\n                <p className=\"text-gray-300 text-xs\">/ person</p>\r\n            </div>\r\n            <div className=\"text-2xl text-cyan-strong font-bold tex\">\r\n                <h2>{`$${totalTip}`}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Total = ({ bill, total }) => {\r\n\r\n    const [totalPerson, setTotalPerson] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (bill > 0 && total > 0) {\r\n            let count = bill / total\r\n            let round = Math.round((count + Number.EPSILON)*100)/100;\r\n            setTotalPerson(round)\r\n        } else {\r\n            setTotalPerson('0.00')\r\n        }\r\n    }, [bill, total])\r\n\r\n    return (\r\n        <div className=\"grid grid-cols-2 gap-20 gap-x-14 sm:gap-20 justify-around w-full items-center h-full\">\r\n            <div className=\"flex flex-col justify-between\">\r\n                <h2 className=\"text-white text-sm font-semibold\">Total</h2>\r\n                <p className=\"text-gray-300 text-xs\">/ person</p>\r\n            </div>\r\n            <div className=\"text-2xl text-cyan-strong font-bold tex\">\r\n                <h2>{`$${totalPerson}`}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultOperation\r\n","import './App.css';\r\nimport logo from './images/logo.svg'\r\nimport ResultOperation from './component/ResultOperation';\r\nimport { nanoid } from 'nanoid';\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction App() {\r\n\r\n  const [bill, setBill] = useState(\"\")\r\n  const [people, setPeople] = useState(\"\")\r\n  const [porc, setPorc] = useState(\"\")\r\n  const [porcInput, setPorcInpute] = useState(\"\")\r\n\r\n  const reset = () => {\r\n    setBill(\"\")\r\n    setPeople(\"\")\r\n    setPorc(\"\")\r\n    setPorcInpute(\"\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center h-screen w-screen\">\r\n      <img\r\n        src={logo} alt=\"logo\"\r\n        className=\"w-16 mb-9\"\r\n      />\r\n      <div className=\"flex flex-col sm:flex-row justify-between items-center bg-white rounded-lg p-4 h-auto w-fll\">\r\n        <main className=\"mb-4 sm:mb-0 mr-0 sm:mr-4 w-full h-full sm:h-full\">\r\n          <CustomInput\r\n            value={bill}\r\n            setValue={setBill}\r\n            icono=\"fas fa-dollar-sign\"\r\n            title=\"Bill\"\r\n          />\r\n          <TipButtons\r\n            text=\"Select tip %\"\r\n            porc={porc}\r\n            setPorc={setPorc}\r\n            porcInput={porcInput}\r\n            setPorcInpute={setPorcInpute}\r\n          />\r\n          <CustomInput\r\n            value={people}\r\n            setValue={setPeople}\r\n            title=\"Number of People\"\r\n            icono=\"fas fa-user\"\r\n          />\r\n        </main>\r\n        <ResultOperation\r\n          bill={bill}\r\n          total={people}\r\n          porc={porc}\r\n          porcInput={porcInput}\r\n          reset={reset}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst CustomInput = ({ value, setValue, title, icono }) => {\r\n\r\n  const handleValue = ({ target }) => {\r\n    setValue(target.value)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"cont\">\r\n      <div className=\"flex justify-between\">\r\n        <span className=\"text-cyan-dark font-bold text-xs tracking-wider\">{title}</span>\r\n        <span className={`${value===\"0\"?\"text-xs text-red-400 font-semibold\":\"hidden\"}`}>Can't be zero</span>\r\n      </div>\r\n      <input\r\n        type=\"number\"\r\n        className={`custom-input mt-1 special-input ${value===\"0\"&&\"boder border-red-400 hover:border-red-400\"}`}\r\n        value={value}\r\n        onChange={handleValue}\r\n        placeholder=\"0\"\r\n      />\r\n      <i className={icono}></i>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TipButtons = ({ text, porc, setPorc, porcInput, setPorcInpute }) => {\r\n\r\n  const [porcentajes] = useState([5, 10, 15, 25, 50])\r\n\r\n  const handleCustomPorc = ({ target }) => {\r\n    setPorcInpute(target.value)\r\n  }\r\n\r\n  const handleButtonPorc = (value) => {\r\n    setPorc(value)\r\n    setPorcInpute(\"\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col mb-5 mt-3\">\r\n      <h2 className=\"text-cyan-dark mb-2 tracking-wider text-xs font-bold\">{text}</h2>\r\n      <div className=\"btn-cont grid grid-cols-2 grid-rows-3 sm:grid-cols-3 sm:grid-rows-2\">\r\n        {\r\n          porcentajes.map((e) => (\r\n            <button\r\n              key={nanoid()}\r\n              className={`boton-1 px-7 hover:bg-cyan-strong hover:text-cyan-strongest ${(e === porc ? \"bg-cyan-strong text-cyan-strongest font-black\" : \"bg-cyan-strongest text-white font-bold\")}`}\r\n              onClick={() => {\r\n                handleButtonPorc(e)\r\n              }}\r\n            >\r\n              {`${e}%`}\r\n            </button>\r\n          ))\r\n        }\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"Custom %\"\r\n          className=\"tip-input text-right\"\r\n          value={porcInput}\r\n          onChange={handleCustomPorc}\r\n          onClick={()=>(setPorc(\"\"))}\r\n        />\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}